= boolean_attributes

+boolean_attributes+ adds automatic generation of predicate methods (truth
accessors) when defining attributes using +attr+, +attr_reader+, +attr_writer+, and
+attr_accessor+.

== Resources

API

* http://api.pluginaweek.org/boolean_attributes

Wiki

* http://wiki.pluginaweek.org/Boolean_attributes

Announcement

* http://www.pluginaweek.org/2007/01/04/9-roverhungry-roverroll_over-roverbad_dog

Source

* http://svn.pluginaweek.org/trunk/plugins/ruby/module/boolean_attributes

Development

* http://dev.pluginaweek.org/browser/trunk/plugins/ruby/module/boolean_attributes

== Description

If you use boolean attributes within your classes, and want to use the
predicate-style methods (i.e. "def foo?; end"), then you have to define these
yourself.  This is a repetitive task especially if you want to query attributes
that may not necessarily contain just true/false.  For example, an attribute
may contain 0, or the string "false".  In this case, you would need to do
special checks to see whether or not the value is really false.

+boolean_attributes+ makes it easy by automatically generating predicate-style
methods for all attributes that are created using +attr+, +attr_reader+, +attr_writer+,
and +attr_accessor+.  In addition, there is support for ActiveRecord's
non-standard truth accessor implementation (see below).

All of these shortcuts have the same interface and meaning as you would normally
find.

== Usage

=== Ruby Attributes

==== attr

This method takes a symbol (the name of the attribute) and an optional argument
for whether or not the attribute is writeable.  For example,

  module Mod
    attr :is_okay, true
  end

is equivalent to:

  module Mod
    def is_okay
      @is_okay
    end
    
    def is_okay=(val)
      @is_okay = value
    end
    
    def is_okay?
      !is_okay.blank?
    end
  end

==== attr_reader

This method is equivalent to calling <tt>battr(symbol, false)</tt> on each symbol in
turn.  For example,

  module Mod
    attr_reader :is_good, :is_bad
  end
  
  Mod.instance_methods.sort   #=> ["is_bad", "is_bad?", "is_good", "is_good?"]

==== attr_writer

This method creates an accessor and predicate method for each symbol in turn.
For example,

  module Mod
    attr_writer :is_good, :is_bad
  end
  
  Mod.instance_methods.sort   #=> ["is_bad=", "is_bad?", "is_good=", "is_good?"]

==== attr_accessor

This method is equivalent to calling <tt>attr(symbol, true)</tt> on each symbol in
turn.  For example,

  module Mod
    attr_accessor :is_good, :is_bad
  end
  
  Mod.instance_methods.sort   #=> ["is_bad", "is_bad=", "is_bad?", "is_good", "is_good=", "is_good?"]

=== ActiveRecord Attributes

The predicate method has a slightly more complex implementation for subclasses
of ActiveRecord::Base.  It is built from how ActiveRecord implemented querying
attributes.  The following lists show which values will return false/true:

For String, the following values return false:
* "false"
* "f"
* "0"
* nil

For Integer, the following values return false:
* 0
* nil

For all other types, the predicate will return true unless the value is nil.

== Dependencies

This plugin does not depend on the presence of any other plugins.

== References

* Yurii Rashkovskii - {Boolean Attributes in Ruby}[http://rashkovskii.com/articles/2007/01/04/boolean-attributes-in-ruby]
* Evan Weaver - {truth accessors in rails}[http://blog.evanweaver.com/articles/2007/01/05/truth-accessors-in-rails]
